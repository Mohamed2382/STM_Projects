
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f08  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001038  08001038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001050  08001050  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001050  08001050  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001050  08001050  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001050  08001050  00011050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001054  08001054  00011054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000020  08001078  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001078  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000679b  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001035  00000000  00000000  000267e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000111c  00000000  00000000  00027819  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002c8  00000000  00000000  00028938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  00028c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003277  00000000  00000000  00028e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000043c4  00000000  00000000  0002c0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ae3a  00000000  00000000  0003047b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003b2b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008ec  00000000  00000000  0003b330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08001020 	.word	0x08001020

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08001020 	.word	0x08001020

08000170 <keypad_init>:
  * @param [in] 	- None
  * @param [out] 	- None
  * @retval 		- None
  * Note			- User must define GPIO pins for rows and columns in @ref Keypad_PINS_define
  */
void keypad_init(){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t Pin_Cfg;
	Pin_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000176:	2304      	movs	r3, #4
 8000178:	71bb      	strb	r3, [r7, #6]
	Pin_Cfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800017a:	2301      	movs	r3, #1
 800017c:	71fb      	strb	r3, [r7, #7]

	Pin_Cfg.GPIO_PinNumber = ROW0;
 800017e:	2301      	movs	r3, #1
 8000180:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &Pin_Cfg);
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	4619      	mov	r1, r3
 8000186:	4834      	ldr	r0, [pc, #208]	; (8000258 <keypad_init+0xe8>)
 8000188:	f000 fbb1 	bl	80008ee <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(KEYPAD_PORT, ROW0, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	2101      	movs	r1, #1
 8000190:	4831      	ldr	r0, [pc, #196]	; (8000258 <keypad_init+0xe8>)
 8000192:	f000 fc42 	bl	8000a1a <MCAL_GPIO_WritePin>

	Pin_Cfg.GPIO_PinNumber = ROW1;
 8000196:	2302      	movs	r3, #2
 8000198:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &Pin_Cfg);
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	4619      	mov	r1, r3
 800019e:	482e      	ldr	r0, [pc, #184]	; (8000258 <keypad_init+0xe8>)
 80001a0:	f000 fba5 	bl	80008ee <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(KEYPAD_PORT, ROW1, GPIO_PIN_SET);
 80001a4:	2201      	movs	r2, #1
 80001a6:	2102      	movs	r1, #2
 80001a8:	482b      	ldr	r0, [pc, #172]	; (8000258 <keypad_init+0xe8>)
 80001aa:	f000 fc36 	bl	8000a1a <MCAL_GPIO_WritePin>

	Pin_Cfg.GPIO_PinNumber = ROW2;
 80001ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001b2:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &Pin_Cfg);
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	4827      	ldr	r0, [pc, #156]	; (8000258 <keypad_init+0xe8>)
 80001ba:	f000 fb98 	bl	80008ee <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(KEYPAD_PORT, ROW2, GPIO_PIN_SET);
 80001be:	2201      	movs	r2, #1
 80001c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c4:	4824      	ldr	r0, [pc, #144]	; (8000258 <keypad_init+0xe8>)
 80001c6:	f000 fc28 	bl	8000a1a <MCAL_GPIO_WritePin>

	Pin_Cfg.GPIO_PinNumber = ROW3;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &Pin_Cfg);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4820      	ldr	r0, [pc, #128]	; (8000258 <keypad_init+0xe8>)
 80001d6:	f000 fb8a 	bl	80008ee <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(KEYPAD_PORT, ROW3, GPIO_PIN_SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e0:	481d      	ldr	r0, [pc, #116]	; (8000258 <keypad_init+0xe8>)
 80001e2:	f000 fc1a 	bl	8000a1a <MCAL_GPIO_WritePin>

	Pin_Cfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80001e6:	2302      	movs	r3, #2
 80001e8:	71bb      	strb	r3, [r7, #6]
	Pin_Cfg.GPIO_PinNumber = COL0;
 80001ea:	2320      	movs	r3, #32
 80001ec:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &Pin_Cfg);
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	4819      	ldr	r0, [pc, #100]	; (8000258 <keypad_init+0xe8>)
 80001f4:	f000 fb7b 	bl	80008ee <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(KEYPAD_PORT, COL0, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2120      	movs	r1, #32
 80001fc:	4816      	ldr	r0, [pc, #88]	; (8000258 <keypad_init+0xe8>)
 80001fe:	f000 fc0c 	bl	8000a1a <MCAL_GPIO_WritePin>


	Pin_Cfg.GPIO_PinNumber = COL1;
 8000202:	2340      	movs	r3, #64	; 0x40
 8000204:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &Pin_Cfg);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4619      	mov	r1, r3
 800020a:	4813      	ldr	r0, [pc, #76]	; (8000258 <keypad_init+0xe8>)
 800020c:	f000 fb6f 	bl	80008ee <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(KEYPAD_PORT, COL1, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4810      	ldr	r0, [pc, #64]	; (8000258 <keypad_init+0xe8>)
 8000216:	f000 fc00 	bl	8000a1a <MCAL_GPIO_WritePin>

	Pin_Cfg.GPIO_PinNumber = COL2;
 800021a:	2380      	movs	r3, #128	; 0x80
 800021c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &Pin_Cfg);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4619      	mov	r1, r3
 8000222:	480d      	ldr	r0, [pc, #52]	; (8000258 <keypad_init+0xe8>)
 8000224:	f000 fb63 	bl	80008ee <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(KEYPAD_PORT, COL2, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	2180      	movs	r1, #128	; 0x80
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <keypad_init+0xe8>)
 800022e:	f000 fbf4 	bl	8000a1a <MCAL_GPIO_WritePin>

	Pin_Cfg.GPIO_PinNumber = COL3;
 8000232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000236:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &Pin_Cfg);
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	4619      	mov	r1, r3
 800023c:	4806      	ldr	r0, [pc, #24]	; (8000258 <keypad_init+0xe8>)
 800023e:	f000 fb56 	bl	80008ee <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(KEYPAD_PORT, COL3, GPIO_PIN_SET);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <keypad_init+0xe8>)
 800024a:	f000 fbe6 	bl	8000a1a <MCAL_GPIO_WritePin>

}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010c00 	.word	0x40010c00

0800025c <keypad_Get_Pressed_Key>:
  * @param [in] 	- None
  * @param [out] 	- None
  * @retval 		- Value of the pressed key, or F if no key is pressed
  * Note			- None
  */
uint8_t keypad_Get_Pressed_Key(){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
	uint8_t return_char = 'F';
 8000262:	2346      	movs	r3, #70	; 0x46
 8000264:	71fb      	strb	r3, [r7, #7]
	uint8_t row_index, col_index;
	for(row_index = 0; row_index < KEYPAD_ROWS; row_index++){
 8000266:	2300      	movs	r3, #0
 8000268:	71bb      	strb	r3, [r7, #6]
 800026a:	e03c      	b.n	80002e6 <keypad_Get_Pressed_Key+0x8a>

		MCAL_GPIO_WritePin(KEYPAD_PORT, Keypad_ROWS_GPIO[row_index], GPIO_PIN_RESET);
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	4a22      	ldr	r2, [pc, #136]	; (80002f8 <keypad_Get_Pressed_Key+0x9c>)
 8000270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000274:	2200      	movs	r2, #0
 8000276:	4619      	mov	r1, r3
 8000278:	4820      	ldr	r0, [pc, #128]	; (80002fc <keypad_Get_Pressed_Key+0xa0>)
 800027a:	f000 fbce 	bl	8000a1a <MCAL_GPIO_WritePin>

		for(col_index = 0; col_index < KEYPAD_COLS; col_index++){
 800027e:	2300      	movs	r3, #0
 8000280:	717b      	strb	r3, [r7, #5]
 8000282:	e021      	b.n	80002c8 <keypad_Get_Pressed_Key+0x6c>

			if(MCAL_GPIO_ReadPin(KEYPAD_PORT, Keypad_COLS_GPIO[col_index]) == GPIO_PIN_RESET){
 8000284:	797b      	ldrb	r3, [r7, #5]
 8000286:	4a1e      	ldr	r2, [pc, #120]	; (8000300 <keypad_Get_Pressed_Key+0xa4>)
 8000288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800028c:	4619      	mov	r1, r3
 800028e:	481b      	ldr	r0, [pc, #108]	; (80002fc <keypad_Get_Pressed_Key+0xa0>)
 8000290:	f000 fbac 	bl	80009ec <MCAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d113      	bne.n	80002c2 <keypad_Get_Pressed_Key+0x66>
				return_char = Keypad_Buttons[row_index][col_index];
 800029a:	79ba      	ldrb	r2, [r7, #6]
 800029c:	797b      	ldrb	r3, [r7, #5]
 800029e:	4919      	ldr	r1, [pc, #100]	; (8000304 <keypad_Get_Pressed_Key+0xa8>)
 80002a0:	0092      	lsls	r2, r2, #2
 80002a2:	440a      	add	r2, r1
 80002a4:	4413      	add	r3, r2
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	71fb      	strb	r3, [r7, #7]

				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, Keypad_COLS_GPIO[col_index]) == GPIO_PIN_RESET);
 80002aa:	bf00      	nop
 80002ac:	797b      	ldrb	r3, [r7, #5]
 80002ae:	4a14      	ldr	r2, [pc, #80]	; (8000300 <keypad_Get_Pressed_Key+0xa4>)
 80002b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002b4:	4619      	mov	r1, r3
 80002b6:	4811      	ldr	r0, [pc, #68]	; (80002fc <keypad_Get_Pressed_Key+0xa0>)
 80002b8:	f000 fb98 	bl	80009ec <MCAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f4      	beq.n	80002ac <keypad_Get_Pressed_Key+0x50>
		for(col_index = 0; col_index < KEYPAD_COLS; col_index++){
 80002c2:	797b      	ldrb	r3, [r7, #5]
 80002c4:	3301      	adds	r3, #1
 80002c6:	717b      	strb	r3, [r7, #5]
 80002c8:	797b      	ldrb	r3, [r7, #5]
 80002ca:	2b03      	cmp	r3, #3
 80002cc:	d9da      	bls.n	8000284 <keypad_Get_Pressed_Key+0x28>
			}
		}
		MCAL_GPIO_WritePin(KEYPAD_PORT, Keypad_ROWS_GPIO[row_index], GPIO_PIN_SET);
 80002ce:	79bb      	ldrb	r3, [r7, #6]
 80002d0:	4a09      	ldr	r2, [pc, #36]	; (80002f8 <keypad_Get_Pressed_Key+0x9c>)
 80002d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d6:	2201      	movs	r2, #1
 80002d8:	4619      	mov	r1, r3
 80002da:	4808      	ldr	r0, [pc, #32]	; (80002fc <keypad_Get_Pressed_Key+0xa0>)
 80002dc:	f000 fb9d 	bl	8000a1a <MCAL_GPIO_WritePin>
	for(row_index = 0; row_index < KEYPAD_ROWS; row_index++){
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	3301      	adds	r3, #1
 80002e4:	71bb      	strb	r3, [r7, #6]
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	d9bf      	bls.n	800026c <keypad_Get_Pressed_Key+0x10>
	}
	return return_char;
 80002ec:	79fb      	ldrb	r3, [r7, #7]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000010 	.word	0x20000010
 80002fc:	40010c00 	.word	0x40010c00
 8000300:	20000018 	.word	0x20000018
 8000304:	20000000 	.word	0x20000000

08000308 <delay_ms>:
 */

#include "delay.h"
#include "LCD.h"

void delay_ms(uint32_t time) {
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	e00b      	b.n	800032e <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	e002      	b.n	8000322 <delay_ms+0x1a>
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2bfe      	cmp	r3, #254	; 0xfe
 8000326:	d9f9      	bls.n	800031c <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	429a      	cmp	r2, r3
 8000334:	d3ef      	bcc.n	8000316 <delay_ms+0xe>
			;
}
 8000336:	bf00      	nop
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000344:	4b52      	ldr	r3, [pc, #328]	; (8000490 <LCD_GPIO_init+0x150>)
 8000346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800034a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800034c:	4b50      	ldr	r3, [pc, #320]	; (8000490 <LCD_GPIO_init+0x150>)
 800034e:	2204      	movs	r2, #4
 8000350:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000352:	4b4f      	ldr	r3, [pc, #316]	; (8000490 <LCD_GPIO_init+0x150>)
 8000354:	2201      	movs	r2, #1
 8000356:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000358:	494d      	ldr	r1, [pc, #308]	; (8000490 <LCD_GPIO_init+0x150>)
 800035a:	484e      	ldr	r0, [pc, #312]	; (8000494 <LCD_GPIO_init+0x154>)
 800035c:	f000 fac7 	bl	80008ee <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000360:	4b4b      	ldr	r3, [pc, #300]	; (8000490 <LCD_GPIO_init+0x150>)
 8000362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000366:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000368:	4b49      	ldr	r3, [pc, #292]	; (8000490 <LCD_GPIO_init+0x150>)
 800036a:	2204      	movs	r2, #4
 800036c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800036e:	4b48      	ldr	r3, [pc, #288]	; (8000490 <LCD_GPIO_init+0x150>)
 8000370:	2201      	movs	r2, #1
 8000372:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000374:	4946      	ldr	r1, [pc, #280]	; (8000490 <LCD_GPIO_init+0x150>)
 8000376:	4847      	ldr	r0, [pc, #284]	; (8000494 <LCD_GPIO_init+0x154>)
 8000378:	f000 fab9 	bl	80008ee <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 800037c:	4b44      	ldr	r3, [pc, #272]	; (8000490 <LCD_GPIO_init+0x150>)
 800037e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000382:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000384:	4b42      	ldr	r3, [pc, #264]	; (8000490 <LCD_GPIO_init+0x150>)
 8000386:	2204      	movs	r2, #4
 8000388:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800038a:	4b41      	ldr	r3, [pc, #260]	; (8000490 <LCD_GPIO_init+0x150>)
 800038c:	2201      	movs	r2, #1
 800038e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000390:	493f      	ldr	r1, [pc, #252]	; (8000490 <LCD_GPIO_init+0x150>)
 8000392:	4840      	ldr	r0, [pc, #256]	; (8000494 <LCD_GPIO_init+0x154>)
 8000394:	f000 faab 	bl	80008ee <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000398:	4b3d      	ldr	r3, [pc, #244]	; (8000490 <LCD_GPIO_init+0x150>)
 800039a:	2201      	movs	r2, #1
 800039c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800039e:	4b3c      	ldr	r3, [pc, #240]	; (8000490 <LCD_GPIO_init+0x150>)
 80003a0:	2204      	movs	r2, #4
 80003a2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80003a4:	4b3a      	ldr	r3, [pc, #232]	; (8000490 <LCD_GPIO_init+0x150>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003aa:	4939      	ldr	r1, [pc, #228]	; (8000490 <LCD_GPIO_init+0x150>)
 80003ac:	4839      	ldr	r0, [pc, #228]	; (8000494 <LCD_GPIO_init+0x154>)
 80003ae:	f000 fa9e 	bl	80008ee <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80003b2:	4b37      	ldr	r3, [pc, #220]	; (8000490 <LCD_GPIO_init+0x150>)
 80003b4:	2202      	movs	r2, #2
 80003b6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003b8:	4b35      	ldr	r3, [pc, #212]	; (8000490 <LCD_GPIO_init+0x150>)
 80003ba:	2204      	movs	r2, #4
 80003bc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80003be:	4b34      	ldr	r3, [pc, #208]	; (8000490 <LCD_GPIO_init+0x150>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003c4:	4932      	ldr	r1, [pc, #200]	; (8000490 <LCD_GPIO_init+0x150>)
 80003c6:	4833      	ldr	r0, [pc, #204]	; (8000494 <LCD_GPIO_init+0x154>)
 80003c8:	f000 fa91 	bl	80008ee <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80003cc:	4b30      	ldr	r3, [pc, #192]	; (8000490 <LCD_GPIO_init+0x150>)
 80003ce:	2204      	movs	r2, #4
 80003d0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003d2:	4b2f      	ldr	r3, [pc, #188]	; (8000490 <LCD_GPIO_init+0x150>)
 80003d4:	2204      	movs	r2, #4
 80003d6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80003d8:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <LCD_GPIO_init+0x150>)
 80003da:	2201      	movs	r2, #1
 80003dc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003de:	492c      	ldr	r1, [pc, #176]	; (8000490 <LCD_GPIO_init+0x150>)
 80003e0:	482c      	ldr	r0, [pc, #176]	; (8000494 <LCD_GPIO_init+0x154>)
 80003e2:	f000 fa84 	bl	80008ee <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80003e6:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <LCD_GPIO_init+0x150>)
 80003e8:	2208      	movs	r2, #8
 80003ea:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <LCD_GPIO_init+0x150>)
 80003ee:	2204      	movs	r2, #4
 80003f0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80003f2:	4b27      	ldr	r3, [pc, #156]	; (8000490 <LCD_GPIO_init+0x150>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003f8:	4925      	ldr	r1, [pc, #148]	; (8000490 <LCD_GPIO_init+0x150>)
 80003fa:	4826      	ldr	r0, [pc, #152]	; (8000494 <LCD_GPIO_init+0x154>)
 80003fc:	f000 fa77 	bl	80008ee <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000400:	4b23      	ldr	r3, [pc, #140]	; (8000490 <LCD_GPIO_init+0x150>)
 8000402:	2210      	movs	r2, #16
 8000404:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000406:	4b22      	ldr	r3, [pc, #136]	; (8000490 <LCD_GPIO_init+0x150>)
 8000408:	2204      	movs	r2, #4
 800040a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800040c:	4b20      	ldr	r3, [pc, #128]	; (8000490 <LCD_GPIO_init+0x150>)
 800040e:	2201      	movs	r2, #1
 8000410:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000412:	491f      	ldr	r1, [pc, #124]	; (8000490 <LCD_GPIO_init+0x150>)
 8000414:	481f      	ldr	r0, [pc, #124]	; (8000494 <LCD_GPIO_init+0x154>)
 8000416:	f000 fa6a 	bl	80008ee <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <LCD_GPIO_init+0x150>)
 800041c:	2220      	movs	r2, #32
 800041e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <LCD_GPIO_init+0x150>)
 8000422:	2204      	movs	r2, #4
 8000424:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <LCD_GPIO_init+0x150>)
 8000428:	2201      	movs	r2, #1
 800042a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800042c:	4918      	ldr	r1, [pc, #96]	; (8000490 <LCD_GPIO_init+0x150>)
 800042e:	4819      	ldr	r0, [pc, #100]	; (8000494 <LCD_GPIO_init+0x154>)
 8000430:	f000 fa5d 	bl	80008ee <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <LCD_GPIO_init+0x150>)
 8000436:	2240      	movs	r2, #64	; 0x40
 8000438:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <LCD_GPIO_init+0x150>)
 800043c:	2204      	movs	r2, #4
 800043e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <LCD_GPIO_init+0x150>)
 8000442:	2201      	movs	r2, #1
 8000444:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000446:	4912      	ldr	r1, [pc, #72]	; (8000490 <LCD_GPIO_init+0x150>)
 8000448:	4812      	ldr	r0, [pc, #72]	; (8000494 <LCD_GPIO_init+0x154>)
 800044a:	f000 fa50 	bl	80008ee <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <LCD_GPIO_init+0x150>)
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <LCD_GPIO_init+0x150>)
 8000456:	2204      	movs	r2, #4
 8000458:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <LCD_GPIO_init+0x150>)
 800045c:	2201      	movs	r2, #1
 800045e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000460:	490b      	ldr	r1, [pc, #44]	; (8000490 <LCD_GPIO_init+0x150>)
 8000462:	480c      	ldr	r0, [pc, #48]	; (8000494 <LCD_GPIO_init+0x154>)
 8000464:	f000 fa43 	bl	80008ee <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800046e:	4809      	ldr	r0, [pc, #36]	; (8000494 <LCD_GPIO_init+0x154>)
 8000470:	f000 fad3 	bl	8000a1a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047a:	4806      	ldr	r0, [pc, #24]	; (8000494 <LCD_GPIO_init+0x154>)
 800047c:	f000 facd 	bl	8000a1a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000486:	4803      	ldr	r0, [pc, #12]	; (8000494 <LCD_GPIO_init+0x154>)
 8000488:	f000 fac7 	bl	8000a1a <MCAL_GPIO_WritePin>

}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000048 	.word	0x20000048
 8000494:	40010800 	.word	0x40010800

08000498 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 800049c:	2001      	movs	r0, #1
 800049e:	f000 f833 	bl	8000508 <LCD_WRITE_COMMAND>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004b2:	4807      	ldr	r0, [pc, #28]	; (80004d0 <LCD_lcd_kick+0x28>)
 80004b4:	f000 fab1 	bl	8000a1a <MCAL_GPIO_WritePin>
	delay_ms(50);
 80004b8:	2032      	movs	r0, #50	; 0x32
 80004ba:	f7ff ff25 	bl	8000308 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <LCD_lcd_kick+0x28>)
 80004c6:	f000 faa8 	bl	8000a1a <MCAL_GPIO_WritePin>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010800 	.word	0x40010800

080004d4 <LCD_INIT>:
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
		}
	}
}

void LCD_INIT() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

	delay_ms(20);
 80004d8:	2014      	movs	r0, #20
 80004da:	f7ff ff15 	bl	8000308 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 80004de:	f7ff ff2f 	bl	8000340 <LCD_GPIO_init>
	//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 80004e2:	200f      	movs	r0, #15
 80004e4:	f7ff ff10 	bl	8000308 <delay_ms>

	LCD_clear_screen();
 80004e8:	f7ff ffd6 	bl	8000498 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80004ec:	2038      	movs	r0, #56	; 0x38
 80004ee:	f000 f80b 	bl	8000508 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80004f2:	2006      	movs	r0, #6
 80004f4:	f000 f808 	bl	8000508 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80004f8:	2080      	movs	r0, #128	; 0x80
 80004fa:	f000 f805 	bl	8000508 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80004fe:	200f      	movs	r0, #15
 8000500:	f000 f802 	bl	8000508 <LCD_WRITE_COMMAND>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	b29b      	uxth	r3, r3
 8000516:	4619      	mov	r1, r3
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <LCD_WRITE_COMMAND+0x40>)
 800051a:	f000 fa95 	bl	8000a48 <MCAL_GPIO_WritePort>
	//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
	//	LCD_CTRL->CRL = command;
	//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <LCD_WRITE_COMMAND+0x40>)
 8000526:	f000 fa78 	bl	8000a1a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <LCD_WRITE_COMMAND+0x40>)
 8000532:	f000 fa72 	bl	8000a1a <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f7ff fee6 	bl	8000308 <delay_ms>
	LCD_lcd_kick();
 800053c:	f7ff ffb4 	bl	80004a8 <LCD_lcd_kick>

}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40010800 	.word	0x40010800

0800054c <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	//	LCD_check_lcd_isbusy();
	//	LCD_CTRL->CRL = character;
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, (character&0x01));
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	2101      	movs	r1, #1
 8000562:	4828      	ldr	r0, [pc, #160]	; (8000604 <LCD_WRITE_CHAR+0xb8>)
 8000564:	f000 fa59 	bl	8000a1a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, (character&0x02));
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	b2db      	uxtb	r3, r3
 8000570:	461a      	mov	r2, r3
 8000572:	2102      	movs	r1, #2
 8000574:	4823      	ldr	r0, [pc, #140]	; (8000604 <LCD_WRITE_CHAR+0xb8>)
 8000576:	f000 fa50 	bl	8000a1a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, (character&0x04));
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	b2db      	uxtb	r3, r3
 8000582:	461a      	mov	r2, r3
 8000584:	2104      	movs	r1, #4
 8000586:	481f      	ldr	r0, [pc, #124]	; (8000604 <LCD_WRITE_CHAR+0xb8>)
 8000588:	f000 fa47 	bl	8000a1a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, (character&0x08));
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	2108      	movs	r1, #8
 8000598:	481a      	ldr	r0, [pc, #104]	; (8000604 <LCD_WRITE_CHAR+0xb8>)
 800059a:	f000 fa3e 	bl	8000a1a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (character&0x10));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 0310 	and.w	r3, r3, #16
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	2110      	movs	r1, #16
 80005aa:	4816      	ldr	r0, [pc, #88]	; (8000604 <LCD_WRITE_CHAR+0xb8>)
 80005ac:	f000 fa35 	bl	8000a1a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (character&0x20));
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 0320 	and.w	r3, r3, #32
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	2120      	movs	r1, #32
 80005bc:	4811      	ldr	r0, [pc, #68]	; (8000604 <LCD_WRITE_CHAR+0xb8>)
 80005be:	f000 fa2c 	bl	8000a1a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (character&0x40));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	2140      	movs	r1, #64	; 0x40
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <LCD_WRITE_CHAR+0xb8>)
 80005d0:	f000 fa23 	bl	8000a1a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, (character&0x80));
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <LCD_WRITE_CHAR+0xb8>)
 80005e2:	f000 fa1a 	bl	8000a1a <MCAL_GPIO_WritePin>
	//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <LCD_WRITE_CHAR+0xb8>)
 80005ee:	f000 fa14 	bl	8000a1a <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << RW_SWITCH);
	//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f7ff fe88 	bl	8000308 <delay_ms>
	LCD_lcd_kick();
 80005f8:	f7ff ff56 	bl	80004a8 <LCD_lcd_kick>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010800 	.word	0x40010800

08000608 <EXTI0_IRQHandler>:
/* =============== ISR Functions ================== */
/* ================================================ */

// EXTI0
void EXTI0_IRQHandler (void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 0;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <EXTI0_IRQHandler+0x1c>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <EXTI0_IRQHandler+0x1c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[0]();
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <EXTI0_IRQHandler+0x20>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4798      	blx	r3

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010400 	.word	0x40010400
 8000628:	2000004c 	.word	0x2000004c

0800062c <EXTI1_IRQHandler>:

// EXTI1
void EXTI1_IRQHandler (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 1;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <EXTI1_IRQHandler+0x1c>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <EXTI1_IRQHandler+0x1c>)
 8000636:	f043 0302 	orr.w	r3, r3, #2
 800063a:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <EXTI1_IRQHandler+0x20>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4798      	blx	r3

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010400 	.word	0x40010400
 800064c:	2000004c 	.word	0x2000004c

08000650 <EXTI2_IRQHandler>:

// EXTI2
void EXTI2_IRQHandler (void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 2;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <EXTI2_IRQHandler+0x1c>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <EXTI2_IRQHandler+0x1c>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <EXTI2_IRQHandler+0x20>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	4798      	blx	r3

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40010400 	.word	0x40010400
 8000670:	2000004c 	.word	0x2000004c

08000674 <EXTI3_IRQHandler>:

// EXTI3
void EXTI3_IRQHandler (void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 3;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <EXTI3_IRQHandler+0x1c>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <EXTI3_IRQHandler+0x1c>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <EXTI3_IRQHandler+0x20>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4798      	blx	r3

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40010400 	.word	0x40010400
 8000694:	2000004c 	.word	0x2000004c

08000698 <EXTI4_IRQHandler>:

// EXTI4
void EXTI4_IRQHandler (void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <EXTI4_IRQHandler+0x1c>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <EXTI4_IRQHandler+0x1c>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <EXTI4_IRQHandler+0x20>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4798      	blx	r3

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40010400 	.word	0x40010400
 80006b8:	2000004c 	.word	0x2000004c

080006bc <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d008      	beq.n	80006de <EXTI9_5_IRQHandler+0x22>
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a22      	ldr	r2, [pc, #136]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 80006d2:	f043 0320 	orr.w	r3, r3, #32
 80006d6:	6153      	str	r3, [r2, #20]
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <EXTI9_5_IRQHandler+0xa4>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <EXTI9_5_IRQHandler+0x40>
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a1b      	ldr	r2, [pc, #108]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 80006f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <EXTI9_5_IRQHandler+0xa4>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000704:	2b00      	cmp	r3, #0
 8000706:	d008      	beq.n	800071a <EXTI9_5_IRQHandler+0x5e>
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a13      	ldr	r2, [pc, #76]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 800070e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000712:	6153      	str	r3, [r2, #20]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <EXTI9_5_IRQHandler+0xa4>)
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000722:	2b00      	cmp	r3, #0
 8000724:	d008      	beq.n	8000738 <EXTI9_5_IRQHandler+0x7c>
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a0c      	ldr	r2, [pc, #48]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 800072c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <EXTI9_5_IRQHandler+0xa4>)
 8000734:	6a1b      	ldr	r3, [r3, #32]
 8000736:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000740:	2b00      	cmp	r3, #0
 8000742:	d008      	beq.n	8000756 <EXTI9_5_IRQHandler+0x9a>
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <EXTI9_5_IRQHandler+0xa0>)
 800074a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074e:	6153      	str	r3, [r2, #20]
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <EXTI9_5_IRQHandler+0xa4>)
 8000752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000754:	4798      	blx	r3
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40010400 	.word	0x40010400
 8000760:	2000004c 	.word	0x2000004c

08000764 <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 8000768:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000770:	2b00      	cmp	r3, #0
 8000772:	d008      	beq.n	8000786 <EXTI15_10_IRQHandler+0x22>
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	4a29      	ldr	r2, [pc, #164]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 800077a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077e:	6153      	str	r3, [r2, #20]
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <EXTI15_10_IRQHandler+0xc0>)
 8000782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000784:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800078e:	2b00      	cmp	r3, #0
 8000790:	d008      	beq.n	80007a4 <EXTI15_10_IRQHandler+0x40>
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 8000798:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <EXTI15_10_IRQHandler+0xc0>)
 80007a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a2:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d008      	beq.n	80007c2 <EXTI15_10_IRQHandler+0x5e>
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	4a1a      	ldr	r2, [pc, #104]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 80007b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ba:	6153      	str	r3, [r2, #20]
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <EXTI15_10_IRQHandler+0xc0>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d008      	beq.n	80007e0 <EXTI15_10_IRQHandler+0x7c>
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 80007d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <EXTI15_10_IRQHandler+0xc0>)
 80007dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007de:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d008      	beq.n	80007fe <EXTI15_10_IRQHandler+0x9a>
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6153      	str	r3, [r2, #20]
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <EXTI15_10_IRQHandler+0xc0>)
 80007fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007fc:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000806:	2b00      	cmp	r3, #0
 8000808:	d008      	beq.n	800081c <EXTI15_10_IRQHandler+0xb8>
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <EXTI15_10_IRQHandler+0xbc>)
 8000810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b03      	ldr	r3, [pc, #12]	; (8000824 <EXTI15_10_IRQHandler+0xc0>)
 8000818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800081a:	4798      	blx	r3
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40010400 	.word	0x40010400
 8000824:	2000004c 	.word	0x2000004c

08000828 <Get_CRLH_Position>:
#include "GPIO.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	2b80      	cmp	r3, #128	; 0x80
 8000836:	d042      	beq.n	80008be <Get_CRLH_Position+0x96>
 8000838:	2b80      	cmp	r3, #128	; 0x80
 800083a:	dc11      	bgt.n	8000860 <Get_CRLH_Position+0x38>
 800083c:	2b08      	cmp	r3, #8
 800083e:	d036      	beq.n	80008ae <Get_CRLH_Position+0x86>
 8000840:	2b08      	cmp	r3, #8
 8000842:	dc06      	bgt.n	8000852 <Get_CRLH_Position+0x2a>
 8000844:	2b02      	cmp	r3, #2
 8000846:	d02e      	beq.n	80008a6 <Get_CRLH_Position+0x7e>
 8000848:	2b04      	cmp	r3, #4
 800084a:	d02e      	beq.n	80008aa <Get_CRLH_Position+0x82>
 800084c:	2b01      	cmp	r3, #1
 800084e:	d028      	beq.n	80008a2 <Get_CRLH_Position+0x7a>
 8000850:	e047      	b.n	80008e2 <Get_CRLH_Position+0xba>
 8000852:	2b20      	cmp	r3, #32
 8000854:	d02f      	beq.n	80008b6 <Get_CRLH_Position+0x8e>
 8000856:	2b40      	cmp	r3, #64	; 0x40
 8000858:	d02f      	beq.n	80008ba <Get_CRLH_Position+0x92>
 800085a:	2b10      	cmp	r3, #16
 800085c:	d029      	beq.n	80008b2 <Get_CRLH_Position+0x8a>
 800085e:	e040      	b.n	80008e2 <Get_CRLH_Position+0xba>
 8000860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000864:	d033      	beq.n	80008ce <Get_CRLH_Position+0xa6>
 8000866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800086a:	dc09      	bgt.n	8000880 <Get_CRLH_Position+0x58>
 800086c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000870:	d029      	beq.n	80008c6 <Get_CRLH_Position+0x9e>
 8000872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000876:	d028      	beq.n	80008ca <Get_CRLH_Position+0xa2>
 8000878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800087c:	d021      	beq.n	80008c2 <Get_CRLH_Position+0x9a>
 800087e:	e030      	b.n	80008e2 <Get_CRLH_Position+0xba>
 8000880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000884:	d027      	beq.n	80008d6 <Get_CRLH_Position+0xae>
 8000886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800088a:	dc03      	bgt.n	8000894 <Get_CRLH_Position+0x6c>
 800088c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000890:	d01f      	beq.n	80008d2 <Get_CRLH_Position+0xaa>
 8000892:	e026      	b.n	80008e2 <Get_CRLH_Position+0xba>
 8000894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000898:	d01f      	beq.n	80008da <Get_CRLH_Position+0xb2>
 800089a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800089e:	d01e      	beq.n	80008de <Get_CRLH_Position+0xb6>
 80008a0:	e01f      	b.n	80008e2 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e01e      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 80008a6:	2304      	movs	r3, #4
 80008a8:	e01c      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 80008aa:	2308      	movs	r3, #8
 80008ac:	e01a      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 80008ae:	230c      	movs	r3, #12
 80008b0:	e018      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80008b2:	2310      	movs	r3, #16
 80008b4:	e016      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 80008b6:	2314      	movs	r3, #20
 80008b8:	e014      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 80008ba:	2318      	movs	r3, #24
 80008bc:	e012      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 80008be:	231c      	movs	r3, #28
 80008c0:	e010      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e00e      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80008c6:	2304      	movs	r3, #4
 80008c8:	e00c      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 80008ca:	2308      	movs	r3, #8
 80008cc:	e00a      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 80008ce:	230c      	movs	r3, #12
 80008d0:	e008      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 80008d2:	2310      	movs	r3, #16
 80008d4:	e006      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 80008d6:	2314      	movs	r3, #20
 80008d8:	e004      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 80008da:	2318      	movs	r3, #24
 80008dc:	e002      	b.n	80008e4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 80008de:	231c      	movs	r3, #28
 80008e0:	e000      	b.n	80008e4 <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 80008ee:	b590      	push	{r4, r7, lr}
 80008f0:	b085      	sub	sp, #20
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
    // Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
    // Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
    volatile uint32_t* configregister = NULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
    uint8_t PIN_Config = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]

    // Determine whether to configure low or high register based on Pin number
    configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	2bff      	cmp	r3, #255	; 0xff
 8000906:	d801      	bhi.n	800090c <MCAL_GPIO_Init+0x1e>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	e001      	b.n	8000910 <MCAL_GPIO_Init+0x22>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3304      	adds	r3, #4
 8000910:	60bb      	str	r3, [r7, #8]

    // Clear CNF[1:0] MODE[1:0] bits in the configuration register
    (*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff86 	bl	8000828 <Get_CRLH_Position>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	230f      	movs	r3, #15
 8000922:	4093      	lsls	r3, r2
 8000924:	43da      	mvns	r2, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	401a      	ands	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	601a      	str	r2, [r3, #0]

    // Check if the pin is configured as an output
    if ((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	789b      	ldrb	r3, [r3, #2]
 8000934:	2b07      	cmp	r3, #7
 8000936:	d00b      	beq.n	8000950 <MCAL_GPIO_Init+0x62>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	789b      	ldrb	r3, [r3, #2]
 800093c:	2b06      	cmp	r3, #6
 800093e:	d007      	beq.n	8000950 <MCAL_GPIO_Init+0x62>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	789b      	ldrb	r3, [r3, #2]
 8000944:	2b05      	cmp	r3, #5
 8000946:	d003      	beq.n	8000950 <MCAL_GPIO_Init+0x62>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d10e      	bne.n	800096e <MCAL_GPIO_Init+0x80>
    {
        // Set CNF[1:0] MODE[1:0] bits based on GPIO mode and output speed
        PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	3b04      	subs	r3, #4
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	b25a      	sxtb	r2, r3
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	78db      	ldrb	r3, [r3, #3]
 800095e:	b25b      	sxtb	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b25b      	sxtb	r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e02c      	b.n	80009c8 <MCAL_GPIO_Init+0xda>
    }
    // If pin is configured as an input
    else
    {
        if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	789b      	ldrb	r3, [r3, #2]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d003      	beq.n	800097e <MCAL_GPIO_Init+0x90>
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d107      	bne.n	800098e <MCAL_GPIO_Init+0xa0>
        {
            // Set CNF[1:0] MODE[1:0] bits for input mode
            PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | 0x0) & 0x0f);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	789b      	ldrb	r3, [r3, #2]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	73fb      	strb	r3, [r7, #15]
 800098c:	e01c      	b.n	80009c8 <MCAL_GPIO_Init+0xda>
        }
        else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // Consider it as input floating
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	2b08      	cmp	r3, #8
 8000994:	d102      	bne.n	800099c <MCAL_GPIO_Init+0xae>
        {
            // Set CNF[1:0] MODE[1:0] bits for input mode (floating)
            PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0f);
 8000996:	2304      	movs	r3, #4
 8000998:	73fb      	strb	r3, [r7, #15]
 800099a:	e015      	b.n	80009c8 <MCAL_GPIO_Init+0xda>
        }
        else // Pull-up or Pull-down input
        {
            PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0f);
 800099c:	2308      	movs	r3, #8
 800099e:	73fb      	strb	r3, [r7, #15]

            // Configure pull-up or pull-down in ODR based on GPIO mode
            if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	789b      	ldrb	r3, [r3, #2]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d107      	bne.n	80009b8 <MCAL_GPIO_Init+0xca>
            {
                // PxODR = 1: Input pull-up
                GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	8812      	ldrh	r2, [r2, #0]
 80009b0:	431a      	orrs	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	e007      	b.n	80009c8 <MCAL_GPIO_Init+0xda>
            }
            else
            {
                // PxODR = 0: Input pull-down
                GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	8812      	ldrh	r2, [r2, #0]
 80009c0:	43d2      	mvns	r2, r2
 80009c2:	401a      	ands	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	60da      	str	r2, [r3, #12]
            }
        }
    }

    // Write the configuration to the CRL or CRH register
    (*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80009c8:	7bfc      	ldrb	r4, [r7, #15]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff2a 	bl	8000828 <Get_CRLH_Position>
 80009d4:	4603      	mov	r3, r0
 80009d6:	fa04 f203 	lsl.w	r2, r4, r3
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	431a      	orrs	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	601a      	str	r2, [r3, #0]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval 		-the input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIOx,uint16_t PinNumber )
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;
	if (((GPIOx->IDR) & PinNumber ) !=  (uint32_t)GPIO_PIN_RESET )
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	4013      	ands	r3, r2
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET ;
 8000a04:	2301      	movs	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	e001      	b.n	8000a0e <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitstatus = GPIO_PIN_RESET ;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	73fb      	strb	r3, [r7, #15]
	}
return  bitstatus ;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr

08000a1a <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx,uint16_t PinNumber , uint8_t Value)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	807b      	strh	r3, [r7, #2]
 8000a26:	4613      	mov	r3, r2
 8000a28:	707b      	strb	r3, [r7, #1]
	if ( Value !=  GPIO_PIN_RESET )
 8000a2a:	787b      	ldrb	r3, [r7, #1]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <MCAL_GPIO_WritePin+0x1e>
//		or
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8000a30:	887a      	ldrh	r2, [r7, #2]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	611a      	str	r2, [r3, #16]
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}

}
 8000a36:	e002      	b.n	8000a3e <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000a38:	887a      	ldrh	r2, [r7, #2]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	615a      	str	r2, [r3, #20]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx , uint16_t Value)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value ;
 8000a54:	887a      	ldrh	r2, [r7, #2]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60da      	str	r2, [r3, #12]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d006      	beq.n	8000a84 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d302      	bcc.n	8000a80 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d004      	beq.n	8000a88 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000a7e:	e005      	b.n	8000a8c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000a82:	e003      	b.n	8000a8c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000a86:	e001      	b.n	8000a8c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000a8a:	e7ff      	b.n	8000a8c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000
 8000a98:	007a1200 	.word	0x007a1200
 8000a9c:	00f42400 	.word	0x00f42400

08000aa0 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 8000aa4:	f7ff ffde 	bl	8000a64 <MCAL_RCC_GetSYS_CLCKFreq>
 8000aa8:	4601      	mov	r1, r0
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	f003 030f 	and.w	r3, r3, #15
 8000ab4:	4a03      	ldr	r2, [pc, #12]	; (8000ac4 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000ab6:	5cd3      	ldrb	r3, [r2, r3]
 8000ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	08001040 	.word	0x08001040

08000ac8 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8000acc:	f7ff ffe8 	bl	8000aa0 <MCAL_RCC_GetHCLKFreq>
 8000ad0:	4601      	mov	r1, r0
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	f003 0307 	and.w	r3, r3, #7
 8000adc:	4a03      	ldr	r2, [pc, #12]	; (8000aec <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000ade:	5cd3      	ldrb	r3, [r2, r3]
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	08001038 	.word	0x08001038

08000af0 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 8000af4:	f7ff ffd4 	bl	8000aa0 <MCAL_RCC_GetHCLKFreq>
 8000af8:	4601      	mov	r1, r0
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	0adb      	lsrs	r3, r3, #11
 8000b00:	f003 0307 	and.w	r3, r3, #7
 8000b04:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000b06:	5cd3      	ldrb	r3, [r2, r3]
 8000b08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000
 8000b14:	08001038 	.word	0x08001038

08000b18 <SPI1_IRQHandler>:
/* ================================================================ */
/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	S_IRQ_SRC_t IRQ;

	IRQ.TXE  = ((SPI1->SR & (1<<1)) >> 1);
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <SPI1_IRQHandler+0x54>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	793b      	ldrb	r3, [r7, #4]
 8000b2c:	f362 0300 	bfi	r3, r2, #0, #1
 8000b30:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <SPI1_IRQHandler+0x54>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	793b      	ldrb	r3, [r7, #4]
 8000b3e:	f362 0341 	bfi	r3, r2, #1, #1
 8000b42:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <SPI1_IRQHandler+0x54>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	793b      	ldrb	r3, [r7, #4]
 8000b52:	f362 0382 	bfi	r3, r2, #2, #1
 8000b56:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_INDEX]->P_IRQ_Call_Back(&IRQ);
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SPI1_IRQHandler+0x58>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	1d3a      	adds	r2, r7, #4
 8000b60:	4610      	mov	r0, r2
 8000b62:	4798      	blx	r3
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40013000 	.word	0x40013000
 8000b70:	2000003c 	.word	0x2000003c

08000b74 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
	S_IRQ_SRC_t IRQ;

	IRQ.TXE = ((SPI2->SR & (1<<1)) >> 1);
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <SPI2_IRQHandler+0x54>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	085b      	lsrs	r3, r3, #1
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	793b      	ldrb	r3, [r7, #4]
 8000b88:	f362 0300 	bfi	r3, r2, #0, #1
 8000b8c:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <SPI2_IRQHandler+0x54>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	793b      	ldrb	r3, [r7, #4]
 8000b9a:	f362 0341 	bfi	r3, r2, #1, #1
 8000b9e:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <SPI2_IRQHandler+0x54>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	091b      	lsrs	r3, r3, #4
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	793b      	ldrb	r3, [r7, #4]
 8000bae:	f362 0382 	bfi	r3, r2, #2, #1
 8000bb2:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_INDEX]->P_IRQ_Call_Back(&IRQ);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SPI2_IRQHandler+0x58>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	1d3a      	adds	r2, r7, #4
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	4798      	blx	r3
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40003800 	.word	0x40003800
 8000bcc:	2000003c 	.word	0x2000003c

08000bd0 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config_t* UART_Config)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config ;
 8000bda:	4a58      	ldr	r2, [pc, #352]	; (8000d3c <MCAL_UART_Init+0x16c>)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a57      	ldr	r2, [pc, #348]	; (8000d40 <MCAL_UART_Init+0x170>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d106      	bne.n	8000bf6 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000be8:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <MCAL_UART_Init+0x174>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a55      	ldr	r2, [pc, #340]	; (8000d44 <MCAL_UART_Init+0x174>)
 8000bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	e014      	b.n	8000c20 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART2 )
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a53      	ldr	r2, [pc, #332]	; (8000d48 <MCAL_UART_Init+0x178>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d106      	bne.n	8000c0c <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000bfe:	4b51      	ldr	r3, [pc, #324]	; (8000d44 <MCAL_UART_Init+0x174>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a50      	ldr	r2, [pc, #320]	; (8000d44 <MCAL_UART_Init+0x174>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	e009      	b.n	8000c20 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART3 )
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a4f      	ldr	r2, [pc, #316]	; (8000d4c <MCAL_UART_Init+0x17c>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d105      	bne.n	8000c20 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000c14:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <MCAL_UART_Init+0x174>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	4a4a      	ldr	r2, [pc, #296]	; (8000d44 <MCAL_UART_Init+0x174>)
 8000c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1e:	61d3      	str	r3, [r2, #28]

	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	7812      	ldrb	r2, [r2, #0]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	7a12      	ldrb	r2, [r2, #8]
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	7a52      	ldrb	r2, [r2, #9]
 8000c50:	431a      	orrs	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	7a92      	ldrb	r2, [r2, #10]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	611a      	str	r2, [r3, #16]

	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	7ad2      	ldrb	r2, [r2, #11]
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <MCAL_UART_Init+0x170>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d104      	bne.n	8000c84 <MCAL_UART_Init+0xb4>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000c7a:	f7ff ff39 	bl	8000af0 <MCAL_RCC_GetPCLK2Freq>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	e003      	b.n	8000c8c <MCAL_UART_Init+0xbc>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000c84:	f7ff ff20 	bl	8000ac8 <MCAL_RCC_GetPCLK1Freq>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60fb      	str	r3, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c98:	0119      	lsls	r1, r3, #4
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009a      	lsls	r2, r3, #2
 8000ca4:	441a      	add	r2, r3
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cbc:	2064      	movs	r0, #100	; 0x64
 8000cbe:	fb00 f303 	mul.w	r3, r0, r3
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	4a22      	ldr	r2, [pc, #136]	; (8000d50 <MCAL_UART_Init+0x180>)
 8000cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ccc:	095b      	lsrs	r3, r3, #5
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	609a      	str	r2, [r3, #8]

	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	7b1b      	ldrb	r3, [r3, #12]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d026      	beq.n	8000d32 <MCAL_UART_Init+0x162>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	7b12      	ldrb	r2, [r2, #12]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <MCAL_UART_Init+0x170>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d106      	bne.n	8000d08 <MCAL_UART_Init+0x138>
			NVIC_IRQ37_USART1_Enable() ;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MCAL_UART_Init+0x184>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <MCAL_UART_Init+0x184>)
 8000d00:	f043 0320 	orr.w	r3, r3, #32
 8000d04:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_Enable() ;

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable() ;
	}
}
 8000d06:	e014      	b.n	8000d32 <MCAL_UART_Init+0x162>
		else if ( USARTx == USART2 )
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <MCAL_UART_Init+0x178>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d106      	bne.n	8000d1e <MCAL_UART_Init+0x14e>
			NVIC_IRQ38_USART2_Enable() ;
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MCAL_UART_Init+0x184>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <MCAL_UART_Init+0x184>)
 8000d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	e009      	b.n	8000d32 <MCAL_UART_Init+0x162>
		else if ( USARTx == USART3 )
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <MCAL_UART_Init+0x17c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d105      	bne.n	8000d32 <MCAL_UART_Init+0x162>
			NVIC_IRQ39_USART3_Enable() ;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MCAL_UART_Init+0x184>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <MCAL_UART_Init+0x184>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	6013      	str	r3, [r2, #0]
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000044 	.word	0x20000044
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	51eb851f 	.word	0x51eb851f
 8000d54:	e000e104 	.word	0xe000e104

08000d58 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( USARTx == USART1 )
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a2b      	ldr	r2, [pc, #172]	; (8000e10 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d118      	bne.n	8000d9a <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000d72:	2301      	movs	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4825      	ldr	r0, [pc, #148]	; (8000e14 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d7e:	f7ff fdb6 	bl	80008ee <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d86:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4619      	mov	r1, r3
 8000d92:	4820      	ldr	r0, [pc, #128]	; (8000e14 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d94:	f7ff fdab 	bl	80008ee <MCAL_GPIO_Init>
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}
}
 8000d98:	e036      	b.n	8000e08 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART2 )
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d116      	bne.n	8000dd0 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000da2:	2304      	movs	r3, #4
 8000da4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000da6:	2306      	movs	r3, #6
 8000da8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	4817      	ldr	r0, [pc, #92]	; (8000e14 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000db6:	f7ff fd9a 	bl	80008ee <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000dba:	2308      	movs	r3, #8
 8000dbc:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4812      	ldr	r0, [pc, #72]	; (8000e14 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000dca:	f7ff fd90 	bl	80008ee <MCAL_GPIO_Init>
}
 8000dce:	e01b      	b.n	8000e08 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3 )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d117      	bne.n	8000e08 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ddc:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000dde:	2306      	movs	r3, #6
 8000de0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000dee:	f7ff fd7e 	bl	80008ee <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000df2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000df6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	4619      	mov	r1, r3
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000e04:	f7ff fd73 	bl	80008ee <MCAL_GPIO_Init>
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40013800 	.word	0x40013800
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40004400 	.word	0x40004400
 8000e1c:	40004800 	.word	0x40004800
 8000e20:	40010c00 	.word	0x40010c00

08000e24 <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler (void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8000e28:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <USART1_IRQHandler+0x10>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	4798      	blx	r3

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000044 	.word	0x20000044

08000e38 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <USART2_IRQHandler+0x10>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	4798      	blx	r3

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000044 	.word	0x20000044

08000e4c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <USART3_IRQHandler+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	4798      	blx	r3


}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000044 	.word	0x20000044

08000e60 <MCAL_UART_IsDataAvailable>:
uint8_t MCAL_UART_IsDataAvailable(USART_TypeDef *USARTx) {
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	// Check if the RXNE flag is set in the status register (SR) of the UART peripheral
	//intial 0 == Data not recieved
	//HW is set bit USART_SR_RXNE  when Received data is ready to be read
	return (USARTx->SR & USART_SR_RXNE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f003 0320 	and.w	r3, r3, #32
 8000e72:	b2db      	uxtb	r3, r3
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <UART_Recieve_Data>:
uint8_t UART_Recieve_Data(void){
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
	uint8_t received_data;
	if (USART1->SR & USART_SR_RXNE) {
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <UART_Recieve_Data+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d002      	beq.n	8000e98 <UART_Recieve_Data+0x18>
		// Read the received data
		received_data = USART1->DR;
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <UART_Recieve_Data+0x24>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	71fb      	strb	r3, [r7, #7]
	}
	return received_data;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40013800 	.word	0x40013800

08000ea8 <UART_Transmit_Data>:

void UART_Transmit_Data(uint8_t data) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set in the SR
	//intial 0 == Data not transferred
	//HW is set bit USART_SR_TXE  when Data is transferred
	while (!(USART1->SR & USART_SR_TXE));
 8000eb2:	bf00      	nop
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <UART_Transmit_Data+0x28>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f9      	beq.n	8000eb4 <UART_Transmit_Data+0xc>

	// Transmit data by writing to the data register
	USART1->DR = data;
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <UART_Transmit_Data+0x28>)
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	6053      	str	r3, [r2, #4]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40013800 	.word	0x40013800

08000ed4 <main>:

// Global variables
unsigned char ch;
uint16_t pressed_key;

int main(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA, GPIOB, and AFIO_GPIOE
    RCC_GPIOA_CLK_EN();
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <main+0xa8>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <main+0xa8>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6193      	str	r3, [r2, #24]
    RCC_GPIOB_CLK_EN();
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <main+0xa8>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <main+0xa8>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6193      	str	r3, [r2, #24]
    RCC_AFIO_GPIOE_CLK_EN();
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <main+0xa8>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <main+0xa8>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6193      	str	r3, [r2, #24]

    // Initialize LCD and keypad
    LCD_INIT();
 8000efe:	f7ff fae9 	bl	80004d4 <LCD_INIT>
    keypad_init();
 8000f02:	f7ff f935 	bl	8000170 <keypad_init>

    // UART configuration
    UART_Config_t config;
    config.BaudRate = UART_BaudRate_115200;
 8000f06:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f0a:	607b      	str	r3, [r7, #4]
    config.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	72fb      	strb	r3, [r7, #11]
    config.IRQ_Enable = UART_IRQ_Enable_NONE; // Disable interrupts
 8000f10:	2300      	movs	r3, #0
 8000f12:	733b      	strb	r3, [r7, #12]
    config.Parity = NULL; // No parity
 8000f14:	2300      	movs	r3, #0
 8000f16:	727b      	strb	r3, [r7, #9]
    config.Payload_Length = UART_Payload_Length_8B;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	723b      	strb	r3, [r7, #8]
    config.StopBits = UART_StopBits__1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	72bb      	strb	r3, [r7, #10]
    config.USART_Mode = UART_MODE_TX_RX;
 8000f20:	230c      	movs	r3, #12
 8000f22:	703b      	strb	r3, [r7, #0]

    // Initialize UART1
    MCAL_UART_Init(USART1, &config);
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4815      	ldr	r0, [pc, #84]	; (8000f80 <main+0xac>)
 8000f2a:	f7ff fe51 	bl	8000bd0 <MCAL_UART_Init>
    MCAL_UART_GPIO_Set_Pins(USART1);
 8000f2e:	4814      	ldr	r0, [pc, #80]	; (8000f80 <main+0xac>)
 8000f30:	f7ff ff12 	bl	8000d58 <MCAL_UART_GPIO_Set_Pins>
    LCD_clear_screen();
 8000f34:	f7ff fab0 	bl	8000498 <LCD_clear_screen>

    while (1) {
        // Check for a pressed key
        uint8_t pressed_key = keypad_Get_Pressed_Key();
 8000f38:	f7ff f990 	bl	800025c <keypad_Get_Pressed_Key>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	75fb      	strb	r3, [r7, #23]

        // Check if a valid key is pressed
        if (pressed_key != 'F') {
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	2b46      	cmp	r3, #70	; 0x46
 8000f44:	d007      	beq.n	8000f56 <main+0x82>
            // Transmit the pressed key via UART1
            UART_Transmit_Data(pressed_key);
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ffad 	bl	8000ea8 <UART_Transmit_Data>

            // Display the pressed key on the LCD
            LCD_WRITE_CHAR(pressed_key);
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fafb 	bl	800054c <LCD_WRITE_CHAR>
        }

        // Check if data is available on UART1
        if (MCAL_UART_IsDataAvailable(USART1)) {
 8000f56:	480a      	ldr	r0, [pc, #40]	; (8000f80 <main+0xac>)
 8000f58:	f7ff ff82 	bl	8000e60 <MCAL_UART_IsDataAvailable>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0ea      	beq.n	8000f38 <main+0x64>
            // Receive the data from UART1
            uint8_t received_data = UART_Recieve_Data();
 8000f62:	f7ff ff8d 	bl	8000e80 <UART_Recieve_Data>
 8000f66:	4603      	mov	r3, r0
 8000f68:	75bb      	strb	r3, [r7, #22]

            // Display the received data on the LCD
            LCD_WRITE_CHAR(received_data);
 8000f6a:	7dbb      	ldrb	r3, [r7, #22]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff faed 	bl	800054c <LCD_WRITE_CHAR>

            // Echo the received data back via UART1
            UART_Transmit_Data(received_data);
 8000f72:	7dbb      	ldrb	r3, [r7, #22]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff97 	bl	8000ea8 <UART_Transmit_Data>
    while (1) {
 8000f7a:	e7dd      	b.n	8000f38 <main+0x64>
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40013800 	.word	0x40013800

08000f84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f86:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f88:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <LoopForever+0xe>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <LoopForever+0x16>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fb2:	f000 f811 	bl	8000fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb6:	f7ff ff8d 	bl	8000ed4 <main>

08000fba <LoopForever>:

LoopForever:
    b LoopForever
 8000fba:	e7fe      	b.n	8000fba <LoopForever>
  ldr   r0, =_estack
 8000fbc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000fc8:	08001058 	.word	0x08001058
  ldr r2, =_sbss
 8000fcc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000fd0:	20000088 	.word	0x20000088

08000fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_2_IRQHandler>
	...

08000fd8 <__libc_init_array>:
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	2500      	movs	r5, #0
 8000fdc:	4e0c      	ldr	r6, [pc, #48]	; (8001010 <__libc_init_array+0x38>)
 8000fde:	4c0d      	ldr	r4, [pc, #52]	; (8001014 <__libc_init_array+0x3c>)
 8000fe0:	1ba4      	subs	r4, r4, r6
 8000fe2:	10a4      	asrs	r4, r4, #2
 8000fe4:	42a5      	cmp	r5, r4
 8000fe6:	d109      	bne.n	8000ffc <__libc_init_array+0x24>
 8000fe8:	f000 f81a 	bl	8001020 <_init>
 8000fec:	2500      	movs	r5, #0
 8000fee:	4e0a      	ldr	r6, [pc, #40]	; (8001018 <__libc_init_array+0x40>)
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	; (800101c <__libc_init_array+0x44>)
 8000ff2:	1ba4      	subs	r4, r4, r6
 8000ff4:	10a4      	asrs	r4, r4, #2
 8000ff6:	42a5      	cmp	r5, r4
 8000ff8:	d105      	bne.n	8001006 <__libc_init_array+0x2e>
 8000ffa:	bd70      	pop	{r4, r5, r6, pc}
 8000ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001000:	4798      	blx	r3
 8001002:	3501      	adds	r5, #1
 8001004:	e7ee      	b.n	8000fe4 <__libc_init_array+0xc>
 8001006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800100a:	4798      	blx	r3
 800100c:	3501      	adds	r5, #1
 800100e:	e7f2      	b.n	8000ff6 <__libc_init_array+0x1e>
 8001010:	08001050 	.word	0x08001050
 8001014:	08001050 	.word	0x08001050
 8001018:	08001050 	.word	0x08001050
 800101c:	08001054 	.word	0x08001054

08001020 <_init>:
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001022:	bf00      	nop
 8001024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001026:	bc08      	pop	{r3}
 8001028:	469e      	mov	lr, r3
 800102a:	4770      	bx	lr

0800102c <_fini>:
 800102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102e:	bf00      	nop
 8001030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001032:	bc08      	pop	{r3}
 8001034:	469e      	mov	lr, r3
 8001036:	4770      	bx	lr
